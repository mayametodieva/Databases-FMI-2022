---/-/Прости заявки/-/---
-- 1. Заявка, която извежда имената на всички ученици, които са от ‚b‘ клас и ги сортира наобратно. 
SELECT s.NAME
FROM STUDENT s
WHERE CLASS_NAME = 'b'
ORDER BY s.NAME DESC

-- 2. Заявка, която извежда името на предмета, датата и коментара на всички похвали и ги сортира по дата. 
SELECT p.SUBJECT_NAME, p.DATE, p.COMMENT
FROM PRAISE_AND_REMARKS p
WHERE p.TYPE = 'p'
ORDER BY p.DATE

-- 3. Заявка, която извежда данните на преподавателя с име Hall Ortiz.
SELECT *
FROM TEACHER t
WHERE t.NAME = 'Hall Ortiz'

-- 4. Заявка, която извежда номера и адреса на родител с име Daphne Pittman.
SELECT p.PHONE_NUMBER, p.ADDRESS
FROM PARENT p
WHERE p.NAME = 'Daphne Pittman'

-- 5. Заявка, която извежда данните на всички ученици от 10 клас и ги сортира по име.
SELECT *
FROM STUDENT s
WHERE s.SCHOOL_YEAR# = 10
ORDER BY s.NAME


---/-/Заявки върху две и повече релации/-/---
-- 1. Заявка, която извежда името на класния ръководител на Vivien Crane.
SELECT t.NAME
FROM STUDENT s, TEACHER t
WHERE s.NAME = 'Vivien Crane' AND s.FORMTUTOR_ID = t.ID

-- 2. Заявка, която извежда имената на родителите, клас и имена на учениците от всички класове без 12-ти, чието име на ученик съдържа ‘а’ и ги сортира първо по име на родител и след това по име на ученик.  
SELECT p.NAME Parent_Name, s.NAME Student_Name, s.SCHOOL_YEAR#
FROM STUDENT s, PARENT p, STUDENT_PARENT sp
WHERE UPPER(s.NAME) LIKE UPPER('%a%') AND s.ID = sp.STUDENT_ID AND p.EMAIL = sp.PARENT_EMAIL
EXCEPT 
SELECT p.NAME Parent_Name, s.NAME Student_Name, s.SCHOOL_YEAR#
FROM STUDENT s, PARENT p, STUDENT_PARENT sp
WHERE UPPER(s.NAME) LIKE UPPER('%a%') AND s.SCHOOL_YEAR# = 12 AND s.ID = sp.STUDENT_ID AND p.EMAIL = sp.PARENT_EMAIL
ORDER BY p.NAME, s.NAME

-- 3. Заявка, която извежда имената на родителите, имената на учениците и клас на всички ученици от 11 и 12 клас и ги сортира по клас, име на ученик, име на родител. 
SELECT p.NAME Parent_Name, s.NAME Student_Name, s.SCHOOL_YEAR#
FROM STUDENT s, PARENT p, STUDENT_PARENT sp
WHERE s.SCHOOL_YEAR# = 11 AND s.ID = sp.STUDENT_ID AND p.EMAIL = sp.PARENT_EMAIL
UNION 
SELECT p.NAME Parent_Name, s.NAME Student_Name , s.SCHOOL_YEAR#
FROM STUDENT s, PARENT p, STUDENT_PARENT sp
WHERE s.SCHOOL_YEAR# = 12 AND s.ID = sp.STUDENT_ID AND p.EMAIL = sp.PARENT_EMAIL
ORDER BY s.SCHOOL_YEAR#, s.NAME, p.NAME

-- 4. Заявка, която извежда имената на класните ръководители на учениците от 10 клас и предметите, по които те преподават без повторения. 
SELECT DISTINCT t.NAME, sb.NAME
FROM STUDENT s, TEACHER t, SUBJECT sb
WHERE s.SCHOOL_YEAR# = 10 AND s.FORMTUTOR_ID = t.ID AND t.ID = sb.TEACHER_ID

-- 5. Заявка, която извежда имената на учениците, имената на предметите, имената на преподавателите и датата на отсъствията на учениците от 10 клас, чието име съдържа ‘а’.
SELECT s.NAME Student_Name, a.SUBJECT_NAME Subject_Name, t.NAME Teacher_Name, a.DATE
FROM STUDENT s, TEACHER t, SUBJECT sb, ABSENCE a
WHERE s.SCHOOL_YEAR# = 10 AND UPPER(s.NAME) LIKE UPPER('%a%') AND s.ID = a.STUDENT_ID AND a.SUBJECT_NAME = sb.NAME AND a.TEACHER_ID = sb.TEACHER_ID AND sb.TEACHER_ID = t.ID 

---/-/Подзаявки/-/---
-- 1. Заявка, която извежда имената и дата на раждане на всички ученици, родени по-рано от Gannon Collier и ги сортира по дата.  
SELECT s.NAME, s.BIRTHDATE
FROM STUDENT s
WHERE s.BIRTHDATE < (SELECT s.BIRTHDATE FROM STUDENT s WHERE s.NAME = 'Gannon Collier')
ORDER BY BIRTHDATE

-- 2. Заявка, която извежда данните за най-малкия ученик. 
SELECT *
FROM STUDENT s
WHERE s.BIRTHDATE <= ALL(SELECT BIRTHDATE FROM STUDENT) 

-- 3. Заявка, която извежда името рождената дата и имейла на учениците, получили забележка след датата на забележката на Anastasia Pearson. 
SELECT s.NAME, s.BIRTHDATE, s.EMAIL
FROM STUDENT s, PRAISE_AND_REMARKS pr
WHERE s.ID = pr.STUDENT_ID AND pr.DATE > (SELECT p.DATE FROM STUDENT s1, PRAISE_AND_REMARKS p WHERE s1.ID = p.STUDENT_ID AND p.TYPE = 'r' AND s1.NAME = 'Anastasia Pearson')

-- 4. Заявка, която извежда имената на учениците, които имат поне една похвала и ги сортира
SELECT DISTINCT s.NAME
FROM STUDENT s
WHERE s.ID IN (SELECT p.STUDENT_ID FROM PRAISE_AND_REMARKS p WHERE p.TYPE = 'p')
ORDER BY s.NAME

-- 5. Заявка, която извежда имената на класните ръководители на ученици, които имат поне една 6ца без повторения
SELECT DISTINCT t.NAME
FROM TEACHER t, (select FORMTUTOR_ID FROM STUDENT s, STUDENT_GRADES g WHERE s.ID = g.STUDENT_ID AND g.GRADE_VALUE = 6) st
WHERE t.ID = st.FORMTUTOR_ID

---/-/Заявки за съединения/-/---

--1. Заявка, която извежда имената и оценките по съответен предмет на всички ученици от 12A клас
SELECT STUDENT.NAME AS 'STUDENT NAME', STUDENT_GRADES.SUBJECT_NAME,STUDENT_GRADES.GRADE_VALUE
FROM STUDENT JOIN STUDENT_GRADES ON STUDENT.ID = STUDENT_GRADES.STUDENT_ID 
AND STUDENT.SCHOOL_YEAR# = 12 AND STUDENT.CLASS_NAME = 'a';

--2. Заявка, която извежда имената на учениците с похвала
SELECT STUDENT.NAME AS 'STUDENT NAME', PRAISE_AND_REMARKS.COMMENT
FROM STUDENT JOIN PRAISE_AND_REMARKS ON STUDENT.ID = PRAISE_AND_REMARKS.STUDENT_ID 
AND PRAISE_AND_REMARKS.TYPE = 'p';

--3. Заявка, която извежда имената и класа на учениците в гимназиален етап на обучениe, както и имената на родителите им
SELECT STUDENT.NAME AS 'STUDENT NAME', STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME, PARENT.NAME AS 'PARENT NAME'
FROM STUDENT JOIN STUDENT_PARENT ON STUDENT.ID = STUDENT_PARENT.STUDENT_ID AND STUDENT.SCHOOL_YEAR# > 7 JOIN PARENT ON STUDENT_PARENT.PARENT_EMAIL = PARENT.EMAIL
ORDER BY STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME;

--4. Заявка, която извежда имената на учениците, изучаващи съответен предмет и неговото наименование
SELECT DISTINCT STUDENT.NAME AS 'STUDENT NAME', SUBJECT.NAME AS 'SUBJECT'
FROM STUDENT JOIN TEACHER ON STUDENT.FORMTUTOR_ID = TEACHER.ID JOIN SUBJECT ON TEACHER.ID = SUBJECT.TEACHER_ID
UNION
SELECT DISTINCT STUDENT.NAME AS 'STUDENT NAME', STUDENT_GRADES.SUBJECT_NAME
FROM STUDENT JOIN STUDENT_GRADES ON STUDENT.ID = STUDENT_GRADES.STUDENT_ID
UNION 
SELECT DISTINCT STUDENT.NAME AS 'STUDENT NAME', ABSENCE.SUBJECT_NAME
FROM STUDENT JOIN ABSENCE ON STUDENT.ID = ABSENCE.STUDENT_ID
UNION
SELECT DISTINCT STUDENT.NAME AS 'STUDENT NAME', PRAISE_AND_REMARKS.SUBJECT_NAME
FROM STUDENT JOIN PRAISE_AND_REMARKS ON STUDENT.ID = PRAISE_AND_REMARKS.STUDENT_ID
ORDER BY STUDENT.NAME;

--5. Заявка, която извежда имената на учителите и съответната паралелка, на която са класни ръководители, в случай че са такива
SELECT DISTINCT TEACHER.NAME AS 'TEACHER NAME', STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME
FROM TEACHER JOIN STUDENT ON STUDENT.FORMTUTOR_ID = TEACHER.ID
ORDER BY SCHOOL_YEAR#;

---/-/Заявки за групиране и агрегации/-/---

--1. Заявка, която извежда имената на родителите с повече от едно деца, посещаващи училището и броят на децата им.
SELECT PARENT.NAME AS 'PARENT NAME', COUNT(STUDENT.ID) AS 'NUMBER OF CHILDREN'
FROM PARENT JOIN STUDENT_PARENT ON PARENT.EMAIL = STUDENT_PARENT.PARENT_EMAIL JOIN STUDENT ON STUDENT_PARENT.STUDENT_ID = STUDENT.ID
GROUP BY PARENT.NAME 
HAVING COUNT(STUDENT.ID) > 1
ORDER BY COUNT(STUDENT.ID) DESC;

--2. Заявка, която извежда броя на отсъствията, които даден преподавател е написал, в случай че е написал.
SELECT TEACHER.NAME AS 'TEACHER NAME', COUNT(*) AS 'NUMBER OF ABSENCES'
FROM TEACHER JOIN ABSENCE ON TEACHER.ID = ABSENCE.TEACHER_ID
GROUP BY TEACHER.NAME;

--3. Заявка, която извежда името на класа с най-много ученици и класният му ръководител, както и броят на учениците в него.
SELECT STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME, TEACHER.NAME 'TEACHER NAME', COUNT(STUDENT.ID) AS 'NUMBER OF STUDENTS'
FROM STUDENT JOIN TEACHER ON STUDENT.FORMTUTOR_ID = TEACHER.ID
GROUP BY TEACHER.NAME, STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME
HAVING COUNT(STUDENT.ID) >= ALL(SELECT COUNT(STUDENT.ID) FROM STUDENT, 
TEACHER WHERE STUDENT.FORMTUTOR_ID = TEACHER.ID 
GROUP BY TEACHER.NAME, STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME);

--4. Заявка, която извежда най-малкият и най-големият ученик в училището
SELECT STUDENT.NAME AS 'STUDENT NAME', STUDENT.BIRTHDATE
FROM STUDENT
WHERE STUDENT.BIRTHDATE = (SELECT MIN(STUDENT.BIRTHDATE) FROM STUDENT)
UNION 
SELECT STUDENT.NAME AS 'STUDENT NAME', STUDENT.BIRTHDATE
FROM STUDENT
WHERE STUDENT.BIRTHDATE = (SELECT MAX(STUDENT.BIRTHDATE) FROM STUDENT);

--5. Заявка, която извежда средния успех на учениците за всеки клас
SELECT STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME, ROUND(AVG(STUDENT_GRADES.GRADE_VALUE), 2) AS 'AVERAGE GRADE'
FROM STUDENT JOIN STUDENT_GRADES ON STUDENT.ID = STUDENT_GRADES.STUDENT_ID
GROUP BY STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME
ORDER BY STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME;

--6. Заявка, която извежда името на преподавателя, написал най-много 6-ци, както и на този, написал най-много слаби оценки
SELECT TEACHER.NAME AS 'TEACHER_NAME', STUDENT_GRADES.GRADE_VALUE
FROM TEACHER JOIN STUDENT_GRADES ON TEACHER.ID = STUDENT_GRADES.TEACHER_ID AND STUDENT_GRADES.GRADE_VALUE > 5.5
GROUP BY TEACHER.NAME, STUDENT_GRADES.GRADE_VALUE 
HAVING COUNT(STUDENT_GRADES.GRADE_VALUE) >= ALL(SELECT COUNT(STUDENT_GRADES.GRADE_VALUE)FROM TEACHER 
JOIN STUDENT_GRADES ON TEACHER.ID = STUDENT_GRADES.TEACHER_ID AND STUDENT_GRADES.GRADE_VALUE > 5.5
GROUP BY TEACHER.NAME, STUDENT_GRADES.GRADE_VALUE)
UNION 
SELECT TEACHER.NAME AS 'TEACHER_NAME', STUDENT_GRADES.GRADE_VALUE
FROM TEACHER JOIN STUDENT_GRADES ON TEACHER.ID = STUDENT_GRADES.TEACHER_ID AND STUDENT_GRADES.GRADE_VALUE < 3
GROUP BY TEACHER.NAME, STUDENT_GRADES.GRADE_VALUE
HAVING COUNT(STUDENT_GRADES.GRADE_VALUE) >= ALL(SELECT COUNT(STUDENT_GRADES.GRADE_VALUE)FROM TEACHER 
JOIN STUDENT_GRADES ON TEACHER.ID = STUDENT_GRADES.TEACHER_ID AND STUDENT_GRADES.GRADE_VALUE < 3
GROUP BY TEACHER.NAME, STUDENT_GRADES.GRADE_VALUE)
ORDER BY STUDENT_GRADES.GRADE_VALUE;

--7. Заявка, която извежда името на най-строгият учител, базирайки се на броя написани забележки
SELECT TEACHER.NAME AS 'TEACHER_NAME', COUNT(PRAISE_AND_REMARKS.COMMENT) AS 'NUMBER OF REMARKS'
FROM PRAISE_AND_REMARKS, TEACHER
WHERE PRAISE_AND_REMARKS.TEACHER_ID = TEACHER.ID AND PRAISE_AND_REMARKS.TYPE = 'r'
GROUP BY TEACHER.NAME
HAVING COUNT(PRAISE_AND_REMARKS.COMMENT) >= ALL (SELECT COUNT(PRAISE_AND_REMARKS.COMMENT)
FROM PRAISE_AND_REMARKS, TEACHER
WHERE PRAISE_AND_REMARKS.TEACHER_ID = TEACHER.ID AND PRAISE_AND_REMARKS.TYPE = 'r'
GROUP BY TEACHER.NAME);

--8. Заявка, която извежда броят на учителите, преподаващи едни и същи предмети
SELECT COUNT(DISTINCT s1.TEACHER_ID) AS 'NUMBER OF TEACHERS TEACHING SAME SUBJECTS'
FROM SUBJECT s1, SUBJECT s2, TEACHER t1, TEACHER t2 
WHERE s1.TEACHER_ID = t1.ID AND s2.TEACHER_ID = t2.ID AND s1.NAME = s2.NAME AND t1.ID != t2.ID;

--9. Заявка, която извежда името учениците с най-висок успех
SELECT STUDENT.NAME AS 'STUDENT_NAME', STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME, AVG(STUDENT_GRADES.GRADE_VALUE) AS 'VALUE'
FROM STUDENT JOIN STUDENT_GRADES ON STUDENT.ID = STUDENT_GRADES.STUDENT_ID
GROUP BY STUDENT.NAME, STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME
HAVING AVG(STUDENT_GRADES.GRADE_VALUE) >= ALL(SELECT AVG(STUDENT_GRADES.GRADE_VALUE) 
FROM STUDENT JOIN STUDENT_GRADES ON STUDENT.ID = STUDENT_GRADES.STUDENT_ID
GROUP BY STUDENT.NAME, STUDENT.SCHOOL_YEAR#, STUDENT.CLASS_NAME)
ORDER BY SCHOOL_YEAR#, CLASS_NAME, STUDENT_NAME;

--10. Заявка, която извежда името на ученикът с най-много отсъствия
SELECT STUDENT.NAME AS 'STUDENT_NAME', COUNT(ABSENCE.DATE) AS 'NUMBER OF ABSENCES'
FROM STUDENT JOIN ABSENCE ON STUDENT.ID = ABSENCE.STUDENT_ID
GROUP BY STUDENT.NAME 
HAVING COUNT(ABSENCE.DATE) >= ALL(SELECT COUNT(ABSENCE.DATE)
FROM STUDENT JOIN ABSENCE ON STUDENT.ID = ABSENCE.STUDENT_ID
GROUP BY STUDENT.NAME);
